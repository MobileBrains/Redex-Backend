<div class="container-fluid">
  <div class="row">
    <div class="col-md-9">
      <div class="text-center">
        <div id="map" style='width: 100%; height: 480px;'></div>
      </div>
    </div>
    <div class="col-md-3">
      <div class="text-center">
        <h4 style="color: white">Entregas de hoy</h4>
        <button id="refreshOrdersState" style="width: 100%; height: 40px">Actualizar Estados <i class="fa fa-refresh" aria-hidden="true"></i>
        </button>
      </div>
      <hr class="hr_red">
      <div class="text-center">
        <h4 style="color: white ">Consultar por numero de cargue</h4>
        <div class="field">
          <input name="chargeNumber" id="chargeNumber">
        </div>
        <button id="ordersByChargeNumber" style="width: 100%; height: 40px">Consultar cargue
        </button>
      </div>
      <hr class="hr_red">
    </div>
  </div>
  <div class="row">
    <div class="col-md-6">
      <div class="text-center chargesTableBackground">
        <h4 class='text' style="color: black">Cargues Anteriores</h4>
        <hr class="hr_red">
        <table class="table table-striped table-inverse dataTableBackground" id="notTodayCharges" >
          <thead>
            <tr >
              <th>Nro de cargue</th>
              <th>Fecha de cargue</th>
              <th>Mensajero</th>
            </tr>
          </thead>
          <% @notTodayChargesNumbersAndDate.each do |charge| %>
          <tr>
            <td><%= charge.charge_number %></td>
            <td><%= charge.created_at %></td>
            <td><%= charge.delivery_man %></td>
          </tr>
          <% end %>
        </table>
      </div>
    </div>
    <div class="col-md-6 " >
      <div class="text-center chargesTableBackground">
        <h4 style="color: black">Cargues de hoy</h4>
        <hr class="hr_red">
        <table class="table table-striped table-inverse dataTableBackground" id="todayCharges"  >
          <thead>
            <tr >
              <th>Nro de cargue</th>
              <th>Mensajero</th>
            </tr>
          </thead>
          <% @todayChargesNumbersAndDate.each do |charge| %>
          <tr>
            <td><%= charge.charge_number %> </td>
            <td><%= charge.delivery_man %></td>
          </tr>
          <% end %>
        </table>
      </div>
    </div>
</div>

<script type="text/javascript">

$(function(){
  intializeMap();
  var todayChargesTable = $('#todayCharges').DataTable({
        "pageLength": 10,
        "language":{
          "sProcessing":     "Procesando...",
          "sLengthMenu":     "Mostrar _MENU_ registros",
          "sZeroRecords":    "No se encontraron resultados",
          "sEmptyTable":     "Ningún dato disponible en esta tabla",
          "sInfo":           "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
          "sInfoEmpty":      "Mostrando registros del 0 al 0 de un total de 0 registros",
          "sInfoFiltered":   "(filtrado de un total de _MAX_ registros)",
          "sInfoPostFix":    "",
          "sSearch":         "Buscar:",
          "sUrl":            "",
          "sInfoThousands":  ",",
          "sLoadingRecords": "Cargando...",
          "oPaginate": {
              "sFirst":    "Primero",
              "sLast":     "Último",
              "sNext":     "Siguiente",
              "sPrevious": "Anterior"
          },
          "oAria": {
              "sSortAscending":  ": Activar para ordenar la columna de manera ascendente",
              "sSortDescending": ": Activar para ordenar la columna de manera descendente"
          }
        }
      });

      var notTodayChargesTable = $('#notTodayCharges').DataTable({
        "pageLength": 10,
        "language":{
          "sProcessing":     "Procesando...",
          "sLengthMenu":     "Mostrar _MENU_ registros",
          "sZeroRecords":    "No se encontraron resultados",
          "sEmptyTable":     "Ningún dato disponible en esta tabla",
          "sInfo":           "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
          "sInfoEmpty":      "Mostrando registros del 0 al 0 de un total de 0 registros",
          "sInfoFiltered":   "(filtrado de un total de _MAX_ registros)",
          "sInfoPostFix":    "",
          "sSearch":         "Buscar:",
          "sUrl":            "",
          "sInfoThousands":  ",",
          "sLoadingRecords": "Cargando...",
          "oPaginate": {
              "sFirst":    "Primero",
              "sLast":     "Último",
              "sNext":     "Siguiente",
              "sPrevious": "Anterior"
          },
          "oAria": {
              "sSortAscending":  ": Activar para ordenar la columna de manera ascendente",
              "sSortDescending": ": Activar para ordenar la columna de manera descendente"
          }
        }
      });
      document.addEventListener("turbolinks:before-cache", function() {
        notTodayChargesTable.destroy();
      });
      document.addEventListener("turbolinks:before-cache", function() {
        todayChargesTable.destroy();
      });
});

$('#refreshOrdersState').click(function() {
    location.reload();
});

$('#ordersByChargeNumber').click(function() {
    ordersByChargeNumber();
});

function ordersByChargeNumber(){

  $.ajax({
          url: '/maps/ordersByChargeNumber/',
          type: 'POST',
          data: {
            chargeNumber: $('#chargeNumber').val()
          },
          success: function(data) {
            intializeMapOrdersByCharge(data)
          },
          error: function(data) {
            console.log(data);
          }
        });
}

function intializeMap(){
  handler = Gmaps.build('Google');
  handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
    markers = handler.addMarkers(<%=raw @hash2.to_json %>);
    markers = handler.addMarkers(<%=raw @hash.to_json %>);
    handler.bounds.extendWith(markers);
    handler.fitMapToBounds();
  });
}

function intializeMapOrdersByCharge(data){
  handler = Gmaps.build('Google');
  handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
    markers = handler.addMarkers(data);
    handler.bounds.extendWith(markers);
    handler.fitMapToBounds();
  });
}

</script>
